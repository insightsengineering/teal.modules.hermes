% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geneSpec.R
\name{geneSpecServer}
\alias{geneSpecServer}
\title{Module Server for Gene Signature Specification}
\usage{
geneSpecServer(
  id,
  funs,
  gene_choices,
  label_modal_title = "Enter list of genes",
 
    label_modal_footer = c("Please enter a comma-separated list of gene IDs and/or names.",
    "(Note that genes not included in current choices will be removed)")
)
}
\arguments{
\item{id}{(\code{string}) the shiny module id.}

\item{funs}{(static named \code{list})\cr names of this list will be used for the function
selection drop down menu.}

\item{gene_choices}{(reactive \code{data.frame})\cr returns the possible gene choices to
populate in the UI, as a \code{data.frame} with columns \code{id} and \code{name}.}

\item{label_modal_title}{(\code{string})\cr title for the dialog that asks for the text input.}

\item{label_modal_footer}{(\code{character})\cr lines of text to use for the footer of the dialog.}
}
\value{
Reactive \code{\link[hermes:GeneSpec]{hermes::GeneSpec}} which can be used as input for the relevant
\code{hermes} functions.
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}

This defines the server part for the gene signature specification.
}
\examples{
ui <- function(id,
               datasets,
               funs) {
  ns <- NS(id)
  teal.devel::standard_layout(
    encoding = div(
      geneSpecInput(
        ns("my_genes"),
        funs = funs,
        label_funs = "Please select function"
      )
    ),
    output = textOutput(ns("result"))
  )
}
server <- function(id,
                   datasets,
                   funs) {
  moduleServer(id, function(input, output, session){
    gene_choices <- reactive({
      mae <- datasets$get_data("MAE", filtered = TRUE)
      object <- mae[[1]]
      gene_ids <- rownames(object)
      gene_names <- SummarizedExperiment::rowData(object)$symbol
      gene_data <- data.frame(
        id = gene_ids,
        name = gene_names
      )
      gene_data[order(gene_data$name), ]
    })
    gene_spec <- geneSpecServer(
      "my_genes",
      funs = funs,
      gene_choices = gene_choices
    )
    output$result <- renderText({
      validate_gene_spec(
        gene_spec(),
        gene_choices()$id
      )
      gene_spec <- gene_spec()
      gene_spec$get_label()
    })
  })
}
funs <- list(mean = colMeans)
my_app <- function() {
  mae <- hermes::multi_assay_experiment
  mae_data <- dataset("MAE", mae)
  data <- teal_data(mae_data)
  app <- init(
    data = data,
    modules = root_modules(
      module(
        label = "GeneSpec example",
        server = server,
        server_args = list(funs = funs),
        ui = ui,
        ui_args = list(funs = funs),
        filters = "all"
      )
    )
  )
  shinyApp(app$ui, app$server)
}
if (interactive()) {
  my_app()
}
}
\seealso{
\code{\link[=geneSpecInput]{geneSpecInput()}} for the module UI.
}
