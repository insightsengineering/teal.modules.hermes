% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/adtteSpec.R
\name{adtteSpecServer}
\alias{adtteSpecServer}
\title{Module Server for \code{ADTTE} Specification}
\usage{
adtteSpecServer(
  id,
  data,
  mae_name,
  adtte_name,
  adtte_vars,
  experiment_data,
  experiment_name,
  assay,
  genes,
  probs
)
}
\arguments{
\item{id}{(\code{string}) the shiny module id.}

\item{data}{(\code{reactive})\cr
\verb{reactive(<teal_data>)} holding all the data sets provided
during app initialization after going through the filters.}

\item{mae_name}{(\code{string})\cr
name of the MAE data used in the teal module.}

\item{adtte_name}{(\code{string})\cr
name of the \code{ADTTE} dataset.}

\item{adtte_vars}{(named \code{list} of \code{string})\cr
names of the variables to use in the \code{ADTTE} dataset. It should comprise elements:
\itemize{
\item \code{aval}: the numeric time-to-event variable.
\item \code{avalu}: the variable holding the unit of \code{aval}.
\item \code{is_event}: the logical event variable. It needs to be \code{TRUE}
when there was an observed event, and \code{FALSE} if the time is censored without
observed event.
\item \code{paramcd}: the character or factor parameter code variable, defining the
type of time-to-event for selection in the module.
\item \code{usubjid}: the subject ID variable.
}}

\item{experiment_data}{(reactive \code{AnyHermesData})\cr input experiment.}

\item{experiment_name}{(reactive \code{string})\cr name of the input experiment.}

\item{assay}{(reactive \code{string})\cr name of the assay.}

\item{genes}{(reactive \code{GeneSpec})\cr gene specification.}

\item{probs}{(reactive \code{numeric})\cr probabilities to bin the gene or gene signature
into.}
}
\value{
List with the following elements:
\itemize{
\item \code{binned_adtte_subset}: reactive containing the joined \code{ADTTE} and gene data.
\item \code{gene_col}: reactive containing the string with the column name of the original
numeric gene variable.
\item \code{gene_factor}: string with the variable name for the binned gene data.
\item \code{time_unit}: reactive string with the time unit for the current subset.
}
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}

This defines the server part for the \code{ADTTE} specification. The resulting data
set \code{binned_adtte_subset} contains the subset of \code{ADTTE} selected by the time-to-event
endpoint, joined together with the gene information extracted from specified assay
and experiment, as numeric and factor columns. The factor column is created by binning
the numeric column according to the quantile cutoffs specified in \code{probs}.
}
\examples{
library(dplyr)

ui <- function(id) {
  ns <- NS(id)

  teal.widgets::standard_layout(
    encoding = uiOutput(ns("encoding_ui")),
    output = verbatimTextOutput(ns("summary"))
  )
}

server <- function(id, data, filter_panel_api) {
  checkmate::assert_class(data, "reactive")
  checkmate::assert_class(shiny::isolate(data()), "teal_data")
  moduleServer(id, function(input, output, session) {
    output$encoding_ui <- renderUI({
      tags$div(
        experimentSpecInput(session$ns("experiment"), data, mae_name = "MAE"),
        assaySpecInput(session$ns("assay")),
        geneSpecInput(session$ns("genes"), funs = list(Mean = colMeans)),
        adtteSpecInput(session$ns("adtte"))
      )
    })
    experiment <- experimentSpecServer(
      "experiment",
      data = data,
      filter_panel_api = filter_panel_api,
      mae_name = "MAE"
    )
    assay <- assaySpecServer(
      "assay",
      assays = experiment$assays
    )
    genes <- geneSpecServer(
      "genes",
      funs = list(Mean = colMeans),
      gene_choices = experiment$genes
    )
    adtte <- adtteSpecServer(
      "adtte",
      data = data,
      adtte_name = "ADTTE",
      mae_name = "MAE",
      adtte_vars = list(
        aval = "AVAL",
        avalu = "AVALU",
        is_event = "is_event",
        paramcd = "PARAMCD",
        usubjid = "USUBJID"
      ),
      experiment_data = experiment$data,
      experiment_name = experiment$name,
      assay = assay,
      genes = genes,
      probs = reactive({
        0.5
      })
    )
    output$summary <- renderPrint({
      binned_adtte_subset <- adtte$binned_adtte_subset()
      summary(binned_adtte_subset)
    })
  })
}

my_app <- function() {
  data <- teal_data()
  data <- within(data, {
    ADSL <- teal.data::rADSL
    ADTTE <- teal.data::rADTTE \%>\%
      dplyr::mutate(is_event = .data$CNSR == 0)
    MAE <- hermes::multi_assay_experiment
  })
  join_keys(data) <- default_cdisc_join_keys[c("ADSL", "ADTTE", "MAE")]

  app <- init(
    data = data,
    modules = modules(
      module(
        label = "adtteSpec example",
        server = server,
        ui = ui,
        datanames = "all"
      )
    )
  )
  shinyApp(app$ui, app$server)
}

if (interactive()) {
  my_app()
}
}
\seealso{
\code{\link[=adtteSpecInput]{adtteSpecInput()}} for the module UI.
}
