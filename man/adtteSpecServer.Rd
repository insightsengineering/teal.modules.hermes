% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/adtteSpec.R
\name{adtteSpecServer}
\alias{adtteSpecServer}
\title{Module Server for ADTTE Specification}
\usage{
adtteSpecServer(
  id,
  datasets,
  mae_name,
  adtte_name,
  adtte_vars,
  experiment_data,
  experiment_name,
  assay,
  genes,
  probs
)
}
\arguments{
\item{id}{(\code{string})\cr
the ID used to call the teal module's UI function.}

\item{datasets}{(\code{Datasets})\cr
teal specific argument which is automatically passed to the UI and server
functions, holding all the data sets provided in the app initialization.}

\item{mae_name}{(\code{string})\cr
name of the MAE data used in the teal module.}

\item{adtte_name}{(\code{string})\cr
name of the ADTTE dataset.}

\item{adtte_vars}{(named \code{list} of \code{string})\cr
names of the variables to use in the ADTTE dataset. It should comprise elements:
\itemize{
\item \code{aval}: the numeric time-to-event variable.
\item \code{avalu}: the variable holding the unit of \code{aval}.
\item \code{is_event}: the logical event variable. It needs to be \code{TRUE}
when there was an observed event, and \code{FALSE} if the time is censored without
observed event.
\item \code{paramcd}: the character or factor parameter code variable, defining the
type of time-to-event for selection in the module.
\item \code{usubjid}: the subject ID variable.
}}

\item{probs}{(reactive \code{numeric})\cr probabilities to bin the gene or gene signature
into.}
}
\value{
List with the following elements:
\itemize{
\item \code{binned_adtte_subset}: reactive containing the joined ADTTE and gene data.
\item \code{gene_col}: reactive containing the string with the column name of the original
numeric gene variable.
\item \code{gene_factor}: string with the variable name for the binned gene data.
\item \code{time_unit}: reactive string with the time unit for the current subset.
}
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}

This defines the server part for the ADTTE specification.
}
\examples{
ui <- function(id,
               datasets) {
  ns <- NS(id)

  teal.devel::standard_layout(
    encoding = div(
      experimentSpecInput(ns("experiment"), datasets = datasets, mae_name = "MAE"),
      assaySpecInput(ns("assay")),
      geneSpecInput(ns("genes"), funs = list(Mean = colMeans)),
      adtteSpecInput(ns("adtte"))
    ),
    output = verbatimTextOutput(ns("summary"))
  )
}

server <- function(input,
                   output,
                   session,
                   datasets) {
  experiment <- experimentSpecServer(
    "experiment",
    datasets = datasets,
    mae_name = "MAE"
  )
  assay <- assaySpecServer(
    "assay",
    assays = experiment$assays
  )
  genes <- geneSpecServer(
    "genes",
    funs = list(Mean = colMeans),
    gene_choices = experiment$genes
  )
  adtte <- adtteSpecServer(
    "adtte",
    datasets = datasets,
    adtte_name = "ADTTE",
    mae_name = "MAE",
    adtte_vars = list(
      aval = "AVAL",
      avalu = "AVALU",
      is_event = "is_event",
      paramcd = "PARAMCD",
      usubjid = "USUBJID"
    ),
    experiment_data = experiment$data,
    experiment_name = experiment$name,
    assay = assay,
    genes = genes,
    probs = reactive({0.5})
  )
  output$summary <- renderPrint({
    binned_adtte_subset <- adtte$binned_adtte_subset()
    summary(binned_adtte_subset)
  })
}

my_app <- function() {
  mae <- hermes::multi_assay_experiment
  adtte <- scda::synthetic_cdisc_data("rcd_2021_07_07")$adtte \%>\%
    dplyr::mutate(is_event = .data$CNSR == 0)

  data <- teal_data(
    dataset(
      "ADTTE",
      adtte,
      code = 'adtte <- scda::synthetic_cdisc_data("rcd_2021_07_07")$adtte \%>\%
        dplyr::mutate(is_event = .data$CNSR == 0)'
    ),
    dataset("MAE", mae)
  )

  app <- init(
    data = data,
    modules = root_modules(
      module(
        label = "adtteSpec example",
        server = server,
        ui = ui,
        filters = "all"
      )
    )
  )
  shinyApp(app$ui, app$server)
}

if (interactive()) {
  my_app()
}
}
\seealso{
\code{\link[=adtteSpecInput]{adtteSpecInput()}} for the module UI.
}
