% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/experimentSpec.R
\name{experimentSpecServer}
\alias{experimentSpecServer}
\title{Module Server for Experiment Specification}
\usage{
experimentSpecServer(
  id,
  datasets,
  mae_name,
  name_annotation = "symbol",
  sample_vars_as_factors = TRUE,
  with_mae_col_data = TRUE
)
}
\arguments{
\item{id}{(\code{string}) the shiny module id.}

\item{datasets}{(\code{Datasets})\cr
teal specific argument which is automatically passed to the UI and server
functions, holding all the data sets provided in the app initialization.}

\item{mae_name}{(\code{string})\cr
name of the MAE data used in the teal module.}

\item{name_annotation}{(\code{string} or \code{NULL})\cr which annotation column to use as name
to return in the \code{genes} data. If \code{NULL}, then the \code{name} column will be set to empty
strings.}

\item{sample_vars_as_factors}{(\code{flag})\cr whether to convert the sample variables
(columns in \code{colData()} of the experiment) from character to factor variables.}

\item{with_mae_col_data}{(\code{flag})\cr whether to include the \code{colData()} of the
MAE into the experiment \code{colData()}.}
}
\value{
List with the following reactive objects:
\itemize{
\item \code{data}: the \code{\link[hermes:HermesData-class]{hermes::AnyHermesData}} experiment.
\item \code{name}: the name of the experiment as selected by the user.
\item \code{genes}: a \code{data.frame} with the genes in \code{data}, with columns \code{id} and \code{name}.
\item \code{assays}: the names of the assays in \code{data}.
}
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}

This defines the server part for the experiment specification.
}
\examples{
ui <- function(id,
               datasets,
               mae_name) {
  ns <- NS(id)
  teal.devel::standard_layout(
    encoding = div(
      experimentSpecInput(
        ns("my_experiment"),
        datasets,
        mae_name,
        label_experiments = "Please choose experiment"
      ),
      selectInput(
        ns("property"),
        "Please choose property",
        c("data", "name", "genes", "assays")
      )
    ),
    output = div(
      verbatimTextOutput(ns("summary")),
      verbatimTextOutput(ns("head"))
    )
  )
}

server <- function(id,
                   datasets,
                   mae_name) {
  moduleServer(id, function(input, output, session) {
    experiment <- experimentSpecServer(
      "my_experiment",
      datasets,
      mae_name
    )
    result <- reactive({
      switch(input$property,
        data = experiment$data(),
        name = experiment$name(),
        genes = experiment$genes(),
        assays = experiment$assays()
      )
    })
    output$summary <- renderPrint({
      result <- result()
      hermes::summary(result)
    })
    output$head <- renderPrint({
      result <- result()
      utils::head(result)
    })
  })
}

my_app <- function() {
  mae <- hermes::multi_assay_experiment
  mae_name <- "MAE"
  mae_data <- dataset(mae_name, mae)
  data <- teal_data(mae_data)
  app <- init(
    data = data,
    modules = root_modules(
      module(
        label = "experimentSpec example",
        server = server,
        server_args = list(mae_name = mae_name),
        ui = ui,
        ui_args = list(mae_name = mae_name),
        filters = "all"
      )
    )
  )
  shinyApp(app$ui, app$server)
}
if (interactive()) {
  my_app()
}
}
\seealso{
\code{\link[=experimentSpecInput]{experimentSpecInput()}} for the module UI.
}
