% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/km.R
\name{tm_g_km}
\alias{tm_g_km}
\alias{ui_g_km}
\alias{srv_g_km}
\alias{sample_tm_g_km}
\title{Teal Module for Kaplan-Meier Plot}
\usage{
tm_g_km(
  label,
  adtte_name,
  mae_name,
  strata_var = NULL,
  pre_output = NULL,
  post_output = NULL
)

ui_g_km(
  id,
  datasets,
  adtte_name,
  mae_name,
  strata_var,
  pre_output,
  post_output
)

srv_g_km(input, output, session, datasets, adtte_name, mae_name, strata_var)

sample_tm_g_km()
}
\arguments{
\item{label}{(\code{string})\cr
menu item label of the module in the teal app.}

\item{adtte_name}{(\code{string})\cr name of the ADTTE dataset.}

\item{mae_name}{(\code{string})\cr
name of the MAE data used in the teal module.}

\item{strata_var}{(\code{character})\cr names of the stratification variables.}

\item{pre_output}{(\code{shiny.tag} or \code{NULL})\cr
placed before the output to put the output into context (for example a title).}

\item{post_output}{(\code{shiny.tag} or \code{NULL})\cr
placed after the output to put the output into context (for example the \code{\link[shiny:helpText]{shiny::helpText()}}
elements can be useful).}

\item{id}{(\code{string})\cr
the ID used to call the teal module's UI function.}

\item{datasets}{(\code{Datasets})\cr
teal specific argument which is automatically passed to the UI and server
functions, holding all the data sets provided in the app initialization.}

\item{input}{(\code{ReactiveValues})\cr the session's input object.}

\item{output}{(\code{shinyoutput})\cr the session's output object.}

\item{session}{(\code{ShinySession})\cr the session object.}
}
\value{
Shiny module to be used in the teal app.
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}

This teal module produces a grid style Kaplan-Meier plot for data with
ADaM structure.
}
\section{Functions}{
\itemize{
\item \code{ui_g_km}: sets up the user interface.

\item \code{srv_g_km}: sets up the user interface.

\item \code{sample_tm_g_km}: sample module function.
}}

\examples{
mae <- hermes::multi_assay_experiment
adtte <- scda::synthetic_cdisc_data("rcd_2021_07_07")$adtte |>
  dplyr::mutate(CNSR = as.logical(CNSR))

data <- teal_data(
  dataset(
    "ADTTE",
    adtte,
    code = 'adtte <- radtte(cached = TRUE) |> mutate(CNSR = as.logical(CNSR))'
  ),
  dataset("mae", mae)
)

modules <- root_modules(
  tm_g_km(
    label = "KM PLOT",
    adtte_name = "ADTTE",
    mae_name = "mae",
    strata_var = c("SEX", "STRATA1")
  )
)

app <- init(
  data = data,
  modules = modules
)

\dontrun{
shinyApp(ui = app$ui, server = app$server)
}

\dontrun{
# Alternatively you can run the sample module with this function call:
sample_tm_g_km()
}
}
